% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/computeStructuralMetrics.R
\name{computeStructuralMetrics}
\alias{computeStructuralMetrics}
\title{Metrics for the assessment of post-imputation structural preservation}
\usage{
computeStructuralMetrics(x, group = NULL, y = NULL, k = 2)
}
\arguments{
\item{x}{numeric matrix. An imputed data matrix of log-intensity.}

\item{group}{factor. A vector of biological groups, experimental conditions or phenotypes (e.g. control, treatment).}

\item{y}{numeric matrix. The source data (i.e. the original log-intensity matrix), preferably subsetted on highly variable peptides (see \code{findVariableFeatures}).}

\item{k}{numeric. Number of Principal Components used to compute the GW distance. default to 2.}
}
\value{
list of three metrics: withinness (sum of squared distances within a phenotype group),
betweenness (sum of squared distances between the phenotypes), and gromov-wasserstein distance (if \code{xna} is not NULL).
if \code{group} is NULL only the GW distance is returned. All metrics are on log scale.
}
\description{
For an imputed dataset, it computes within phenotype/experimental condition similarity (i.e. preservation of local structures),
between phenotype distances (preservation of global structures), and the Gromov-Wasserstein (GW) distance between original (source) and
imputed data.
}
\details{
For each group of experimental conditions (e.g. treatment and control), the group centroid is calculated as the average
of observed peptide intensities. Withinness for each group is computed as sum of the squared distances between samples in that group and
the group centroid. Betweenness is computed as sum of the squared distances between group centroids.
When comparing imputation approaches, the optimal imputation strategy should minimize the within
group distances, hence smaller withinness, and maximizes between group distances, hence larger betweenness.
The GW metric considers preservation of both local and global structures simultaneously. A small GW distance suggests that
imputation has introduced small distortions to global and local structures overall, whereas a large distance implies significant
distortions. When comparing two or more imputation methods, the optimal method is the method with smallest GW distance.
The GW distance is computed on Principal Components (PCs) of the source and imputed data, instead of peptides. Principal components capture the
geometry of the data, hence GW computed on PCs is a better measure of preservation of local and global structures. The PCs in the source data are
recommended to be computed on peptides with high biological variance. Hence, users are recommended to subset the source data only on highly variable peptides (hvp)
(see \code{findVariableFeatures}). Since the hvp peptides have high biological variance, they are likely to have enough information to discriminate samples
from different experimental groups. Hence, PCs computed on those peptides should be representative of the original source data with missing values.
If the samples cluster by experimental group in the first couple of PCs, then a choice of k=2 is reasonable. If the desired separation/clustering of samples
occurs in later PCs (i.e. the first few PCs are dominated by batches or unwanted variability), then it is recommended to use a larger number of PCs to compute the
GW metric. If you are interested in how well the imputed data represent the original data in all possible dimensions, then set k to the number of samples
in the data (i.e. the number of columns in the intensity matrix).
GW distance estimation requires \code{python}. See example. All metrics are on log scale.
}
\examples{
## To compute the GW distance you need to have python installed
## then install the reticulate R package from CRAN
# install.packages("reticulate")
# library(reticulate)
## create a virtual environment
# virtualenv_create('msImpute-reticulate')
# py_available() # if this returns TRUE, you've access to python from R.
## See reticulate if you need to troubleshoot
## install scipy and POT python packages in this virtual environment
# virtualenv_install("msImpute-reticulate","scipy")
# virtualenv_install("msImpute-reticulate","cython")
# virtualenv_install("msImpute-reticulate","POT")
## if this runs successfully, the installations have been successful:
# scipy <- import("scipy")
## You can now run the computeStructuralMetrics() function to compute GW distance.
## This setup should only be done for the first use. For all subsequent usages
## load the virtual environment that you've created using:
# library(reticulate)
# use_virtualenv("msImpute-reticulate")
## you can then run the computeStructuralMetrics() function.
## Note that the reticulate package should be loaded before loading msImpute.
set.seed(101)
n=12000
p=10
J=5
np=n*p
missfrac=0.3
x=matrix(rnorm(n*J,mean = 5,sd = 0.2),n,J)\%*\%matrix(rnorm(J*p, mean = 5,sd = 0.2),J,p)+
  matrix(rnorm(np,mean = 5,sd = 0.2),n,p)/5
ix=seq(np)
imiss=sample(ix,np*missfrac,replace=FALSE)
xna=x
xna[imiss]=NA
keep <- (rowSums(!is.na(xna)) >= 4)
xna <- xna[keep,]
rownames(xna) <- 1:nrow(xna)
y <- xna
xna <- scaleData(xna)
xcomplete <- msImpute(object=xna)
G <- as.factor(sample(1:3, p, replace = TRUE))
top.hvp <- findVariableFeatures(y)
#computeStructuralMetrics(xcomplete, G, y[rownames(top.hvp)[1:50],], k = 2)
computeStructuralMetrics(xcomplete, G, y=NULL) # gw_dist is not computed if y is null

}
\references{
Hediyeh-zadeh, S., Webb, A. I., & Davis, M. J. (2020). MSImpute: Imputation of label-free mass spectrometry peptides by low-rank approximation. bioRxiv.
}
